// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  comments      Comment[]
  ratings       Rating[]
  commentLikes  commentLikes[]
  recipesCreated Recipe[] @relation("RecipesCreated")
}
model Recipe {
  id          String   @id @default(cuid())
  label        String
  yield       Int
  image       String
  totalTime   Int
  cuisineType Json[]
  mealType    Json[]
  dishType    Json[]
  ingredients Json[]
  healthLabels Json[]
  digest Json[]
  CreatedBy   User?  @relation("RecipesCreated",fields: [userId], references: [id], onDelete: Cascade) 
  userId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users      User[] 
  comments   Comment[]
  ratings    Rating[]
}

model Rating {
  id          String   @id @default(cuid())
  rating      Float
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  @@unique([userId, recipeId], name: "userId_recipeId")
}

model Comment {
  id          String   @id @default(cuid())
  text        String
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  parent     Comment? @relation("parentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId   String?
  children    Comment[] @relation("parentChild")
  createdAt   DateTime @default(now())
  commentLikes commentLikes[]
}

model commentLikes {
  id          String   @id @default(cuid())
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  @@unique([userId, commentId], name: "userId_commentId")
}
